----stuff to implement----

-resolution-scaled pictures; need some algorithm for this + program to do it

-add GUI to btd6Bot program

-add methods to use Geraldo's shop and Corvus' spells




########
DONE:

-upgrade detection is fine now: checks all possible paths to upgrade and presses correct upgrade hotkey






----history----

v0.1
-mouseTracker.py reads from input() and can be used to write down round-based placements on a BTD6coordinates.txt file
 >so for example input 'place a dart monkey' at (200,300) would print: 'X: 200 Y: 300 | place a dart monkey
-made function.py for general functions.
-image recognition implemented with pyautogui-library + separate rounds images, as check_rounds in function.py
-main file btd6Bot.py doesn't do anything yet
(created test.py where I tested plenty of code blocks individually, will delete later)

v0.2
-improved mouseTracker.py to listen to keyboard inputs via pynput-module. This however runs at the same time during input() which reads inputs slowly. But good enough.
-made monkey_meadow.py and implemented basic round strategy basis with match-case
-took a few screenshots to test monkey_meadow.py modules functionality. Image recognition had issues but they were due to a bad implementation:
 >initially checked if round image exists on monitor. If not, would jump to next round. But hovering a tower disables round number -> pretty much jumps to the end
 >better and current one: checks the round image, if it matches to round number, does all the stuff of that round. Then waits the next round image, matches
 >so major diff is: in first, we proceed after the image is no longer found - in second, we match after image is found, do stuff then wait for the next time
-implemented scaling coordinate system so mouse location should work similarly on any resolution


v0.3
-can play Monkey Meadow map on easy + standard; literally just copied rest of round images up to 40. Code is very repetitive.
-also implemented some timing functions so that placement and upgrading pacing is better
-created a Maps-folder and decided ultimately to do all map's strats on same module, instead of splitting each difficulty+mode combination to separate one
 >would've been a lot of files and folders. Now just one folder with still plenty of modules but much fewer
-created a basis for level-tracking within maps.py file: idea is to make main program asks for user input, then direct this input to maps.py
 >then maps.py chooses first and end rounds depending on difficulty and gamemode and passes them onto functions calling a specific map function


v0.4
-big, big upgrades!
-can now read rows from a text file. Rows consists of map name, difficulty and game mode. Then this info is passed onto maps.py which chooses rounds for specific modes
 >then map name, difficulty, game mode, first round and last round are all passed onto a match-case that will direct flow to the correct map
 >map module will then use info to choose right settings for specific modes and execute
 >finally, will return to main menu or optonally (not yet fully implemented) continue to repeat map or play others
-reimplemented map's match-case structure to if-elif, because match-case can't use non-typed values to match with
 >in other words, if case: final_round, it doesn't intepret that - would need to use literal '40' or similar instead
 >but since different modes have different last rounds, was worth to it with ifs instead
-finally implemented tower placing and upgrading via OOP in towers.py. Will certainly make individual round code so much clearer.
 >each tower is part of Monkey-class and has attributes for tower type ('Dart, Ice, Ninja, Super, etc.) and location, with x and y coordinates separated
 >just remember to first create a monkey-object and then also place it. After that it can be upgraded via giving it sequence of hotkeys for upgrades - it can parse them


v0.5
-for single-map mode, ask if user wants to set infinite repeat on map by typing REPLAY then press Enter. Or just press Enter (or give any other input) if not 
-automatically start a map from menu
-can automatically choose a correct hero before entering a map
-add queue of maps to play (done via custom_maplist.txt)
-mouseTracker.py has now mouse + keyboard control, making coordinate saving much easier
-implemented a stopping function to bot; can be set as a "hotkey"...
 >"hotkey" means that if you press all the required keys at least once during runtime, program terminates. So still a safety net to avoid accidental exits.


v0.6
-implemented tower placing detection
 >program checks if 'sell' button appears after clicking a coordinate and keeps trying to place a tower until the image is recognised
-target settings (first, last, close and strong) implement only for heroes so far

v0.7
-target settings implemented for all towers (first, last, close, strong and other custom ones)
 >not tested, but should just fine
 >hero level tracking not implemented so when Etienne reaches lvl 12, he automatically switches to 'Zone Control' and stays that way
  >>so if you use Etienne, note down the round he hits lvl 12 and add a line 'hero.change_target('Zone')' at the beginning
-basic upgrade detection implemented, still needs a lot of work
-improved tower placing detection speed
-ability use (both towers and heroes)
 >well this literally just means using hotkeys 1-9 + 0 so nothing impressive really...


v0.8


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ORIGINAL PLAN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Project:

-plays Bloons TD 6 automatically on chosen map, with predetermined settings
 >settings include:
  --hero
  --map
  --difficulty
  --game mode
  --strategy
    -towers + their input locations
    -upgrades, in order
    -targettin (first, strong, last etc.)
    -direction/position (only if applicaple; helis, dart guns, mermonkey mid path ability etc.)
    -abilities (for both heroes and towers)
  --game speed (should always be set to faster)
  *anything else?*


----Fundamental----

-mouse control to a specific location + clicking
 >in a game like bloons, mouse can handle everything; at least can't think anything that absolutely requires keyboard inputs
 >could consider keyboard inputs
    -however, different players use different layouts so one's hotkey is not necessarily another'set
    -could of course set up a file which lists hotkeys which are required for bot to work or just avoid using keyboard hotkeys!
 >could also implement insta-return to original coordinate: this way - if played in windowed mode - you could just do stuff on second monitor

-how to tell program the current round
 >important because can't mod game files -> only way is to use visual cues like pixel/image comparing OR text reading (far more advanced, requires separate library)
 >has to recognise every round from monitor and detect round change to allow tower cyclic commands for each round - otherwise would need to use A LOT of timing functions...
 >should not confuse two rounds at any point
    -for this, you need all normal rounds accounted e.g. 1-100 so 100 images.
    -probably easiest to use round numbering syntax X / Y where X current round and Y final round, and save all images without background
    -then match to this picture on each round (do a frequent matching, like each second or even less if needed)
    -when program detects the current round, it will execute all instructions for that given round, then tries to match for the next rounds image
    -after final round concludes, it terminates (unless we want to implement looping for farming purposes OR play multiple maps in a row)
    [should start with image matching. Later on can try the text reading implementation after you have a functional program with most of the important stuff working]

-creating a basis for a setting file
 >contain pre-game settings like hero, maps, difficulty, game mode, game speed
 >then also in-game strategy with all in-game inputs like tower placements, upgrades, behaviours, abilities - and of course their timings based on rounds
 >should use some kind of text file: initially just txt or Python to test stuff. Later file standart is needed, maybe a JSON file?



----Other----

-resolution scaling
 >different monitors have different pixel coordinates so program should be able to scale coordinate positions accordingly
    -not only for mouse inputs but for also images so that round detection works properly (this might require implementing that text reading library instead...)
 >so use a scalar 0-1 instead so that actual location is this number * x-coordinate - same for y
 >x-axis goes from left to right, with 0 being upper left corner of monitor and 1919 being the upper right
 >for y, starts from up and increases down - so 0 is upper edge - and 1079 is the lower edge - of monitor


-repeating same strategy (= farm a map like Dark Castle) OR play multiple different strategies in a row
-easier way to add player strategies, e.g. program can read from a file and save a strat (would need to match with regex)
-some kind of GUI for a more user-friendly experience and custom strat data importing



------------------------------------------
SOME OLD CODE:

~~~setting up game modes; this one has slow input during input() because keyBoardListener constantly interferes with it. 
   Solution was to attach Listener-object to another function that will return either 's' or 'm' and stop this Listener.
   Then input() can be run inside new function and will work as expected. This newer version uses a global variable, through, but it will not be referenced after its use
   Another solution could have been to use pyperclip-module and just copy-paste the correct letter to another program without need global variables, but yeah...

def run_btd6bot(key_pressed):  
    try: 
        if key_pressed.char == 's' or key_pressed.char == 'S':
            #keyBoardListener.stop()
            time.sleep(1)
            print('Give map name, difficulty and gamemode. Possible inputs: ')
            print(open('maps.txt').read() + '\n\n')
            read_list = open('maps.txt').readlines()     #creates a list of each row in maps.txt
            map_list = []
            for map in read_list:        #remove whitespace characters from each row
                map_list.append(map.strip())
            time.sleep(1)
            functions.flush_input()      #flushes existing input so input() doesn't contain previous key presses
            user = input()               #asks user input
            input_list = map_list[map_list.index(user)].split()             #reads user input and finds matching index in maps.txt, then splits each word into another list.
            maps.playmap(input_list[0], input_list[1] , input_list[2])      #then we call playmap function with variables 1. map 2. difficulty 3. game mode
              
        #Pressing 'M' initializes multi-map mode
        elif key_pressed.char == 'm' or key_pressed.char == 'M':
            #keyBoardListener.stop()
            time.sleep(1)
            read_list = open('map_list').readlines()
            map_list = []
            for map in read_list:
                map_list.append(map.strip())
            for listed_maps in map_list:                                    #loops over all maps in map_list.py from top to bottom.
                maps.playmap(listed_maps[0], listed_maps[1], listed_maps[2])
        else:
            print('Invalid input')

    except AttributeError:
        if key_pressed == pynput.keyboard.Key.esc:      #pressing Esc halts the program
            print('Program closing...')
            return False
        print('Invalid input')


with pynput.keyboard.Listener(on_press = run_btd6bot) as keyBoardListener:
    keyBoardListener.join() 


--------------------------------------------------------


~~~round structure before implementing Monkey class. Before this, I also used match-case instead of if-elif but case values have to be literals, not variables.
   But because end round depends on game mode, it was reasonable to use to change to this, instead of manually setting the last round on every single mode.

if current_round == 1:
                functions.kb_input('d')        #place ninja and upgrade to 1-0-0
                functions.click(0.33229, 0.48333)
                functions.click(0.33229, 0.48333)
                functions.kb_input(',')
                                   
                functions.kb_input('q')         #place dart
                functions.click(0.4651, 0.44167) 

                #start game with Fast speed
                functions.click(0.95521, 0.93889)
                functions.click(0.95521, 0.93889)
            elif current_round == 2:
                functions.click(0.33229, 0.48333)     #upgrade 1-0-0 ninja to 2-0-0
                functions.kb_input(',')
                functions.click(0.01771, 0.99907)   #clicks away to close monkey panel
            elif current_round == 4:
                functions.click(0.33229, 0.48333)   #upgrade ninja to 2-0-1
                functions.kb_input('-')
                functions.click(0.01771, 0.99907)
            elif current_round == 8:
                functions.click(0.33229, 0.48333)   #upgrade ninja to 3-0-1
                functions.kb_input(',')
                functions.click(0.01771, 0.99907)
            elif current_round == 13:
                functions.kb_input('f')       #place alch and upgrade to 2-0-0
                functions.click(0.25677, 0.47593)
                functions.click(0.25677, 0.47593)
                functions.kb_input(',')
                time.sleep(0.5)
                functions.kb_input(',')
                functions.click(0.01771, 0.99907)
            elif current_round == 16:
                functions.click(0.25677, 0.47593)   #upgrade alch to 3-0-0
                functions.kb_input(',')
                functions.click(0.01771, 0.99907)
            elif current_round == 26:
                functions.click(0.33229, 0.48333)   #upgrade ninja to 4-0-1
                functions.kb_input(',')
                functions.click(0.01771, 0.99907)
            elif current_round == 33:
                functions.click(0.25677, 0.47593)   #upgrade alch to 4-0-2
                functions.kb_input(',')
                time.sleep(0.5)
                functions.kb_input('.')
                time.sleep(0.5)
                functions.kb_input('.')
                functions.click(0.01771, 0.99907)
            elif current_round == 37:
                functions.kb_input('z')             #place a sniper and upgrade to 2-0-4
                functions.click(0.76094, 0.30463)
                functions.click(0.76094, 0.30463)
                functions.kb_input(',')
                time.sleep(0.5)
                functions.kb_input(',')
                time.sleep(0.5)
                functions.kb_input('-')
                time.sleep(0.5)
                functions.kb_input('-')
                time.sleep(0.5)
                functions.kb_input('-')
                functions.click(0.01771, 0.99907)
            elif current_round == 38:               #upgrade sniper to 2-0-4
                functions.click(0.76094, 0.30463)
                functions.kb_input('-')
                functions.click(0.01771, 0.99907)
            elif current_round == end:                 #final round, remember to update this based on game mode
                    time.sleep(10)                     #enough time for round to end
                    functions.click(0.5, 0.85)         #exit to main menu
                    time.sleep(1)
                    functions.click(0.37, 0.78)
                    print('Done!')
                    return  # game ends